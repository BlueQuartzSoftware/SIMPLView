/*
 * Your License or Copyright can go here
 */

#include "@ClassName@.h"

#include <QtCore/QTextStream>

#include "SIMPLib/Common/Constants.h"

@Filter_CPP_Includes@

#include "@PluginName@/@PluginName@Constants.h"
#include "@PluginName@/@PluginName@Version.h"


// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
@ClassName@::@ClassName@() @InitList@
{
  initialize();
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
@ClassName@::~@ClassName@() = default;

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
void @ClassName@::initialize()
{
  clearErrorCode();
  clearWarningCode();
  setCancel(false);
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
void @ClassName@::setupFilterParameters()
{
  FilterParameterVectorType parameters;
@SetupFPContents@
  setFilterParameters(parameters);
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
void @ClassName@::dataCheck()
{
  clearErrorCode();
  clearWarningCode();
  @DataCheckContents@
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
void @ClassName@::execute()
{
  initialize();
  dataCheck();
  if(getErrorCode() < 0) { return; }

  if (getCancel()) { return; }

  if (getWarningCode() < 0)
  {
    QString ss = QObject::tr("Some warning message");
    setWarningCondition(-88888888, ss);
  }

  if (getErrorCode() < 0)
  {
    QString ss = QObject::tr("Some error message");
    setErrorCondition(-99999999, ss);
    return;
  }

}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
AbstractFilter::Pointer @ClassName@::newFilterInstance(bool copyFilterParameters) const
{
  @ClassName@::Pointer filter = @ClassName@::New();
  if(copyFilterParameters)
  {
    copyFilterParameterInstanceVariables(filter.get());
  }
  return filter;
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
QString @ClassName@::getCompiledLibraryName() const
{ 
  return @PluginName@Constants::@PluginName@BaseName;
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
QString @ClassName@::getBrandingString() const
{
  return "@PluginName@";
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
QString @ClassName@::getFilterVersion() const
{
  QString version;
  QTextStream vStream(&version);
  vStream <<  @PluginName@::Version::Major() << "." << @PluginName@::Version::Minor() << "." << @PluginName@::Version::Patch();
  return version;
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
QString @ClassName@::getGroupName() const
{ 
  return SIMPL::FilterGroups::Unsupported; 
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
QString @ClassName@::getSubGroupName() const
{ 
  return "@PluginName@"; 
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
QString @ClassName@::getHumanLabel() const
{ 
  return "@ClassName@"; 
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
QUuid @ClassName@::getUuid() const
{
  return QUuid("@Uuid@");
}

// -----------------------------------------------------------------------------
@ClassName@::Pointer @ClassName@::NullPointer()
{
  return Pointer(static_cast<Self*>(nullptr));
}

// -----------------------------------------------------------------------------
std::shared_ptr<@ClassName@> @ClassName@::New()
{
  struct make_shared_enabler : public @ClassName@
  {
  };
  std::shared_ptr<make_shared_enabler> val = std::make_shared<make_shared_enabler>();
  val->setupFilterParameters();
  return val;
}

// -----------------------------------------------------------------------------
QString @ClassName@::getNameOfClass() const
{
  return QString("@ClassName@");
}

// -----------------------------------------------------------------------------
QString @ClassName@::ClassName()
{
  return QString("@ClassName@");
}


@Filter_Parameter_Definitions@

