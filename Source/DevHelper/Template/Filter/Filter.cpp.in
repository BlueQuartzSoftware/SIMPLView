/*
 * Your License or Copyright can go here
 */

#include "@ClassName@.h"

#include "SIMPLib/Common/Constants.h"

@Filter_CPP_Includes@

#include "@PluginName@/@PluginName@Constants.h"
#include "@PluginName@/@PluginName@Version.h"


// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
@ClassName@::@ClassName@() @InitList@
{
  initialize();
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
@ClassName@::~@ClassName@() = default;

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
void @ClassName@::initialize()
{
  setErrorCondition(0);
  setWarningCondition(0);
  setCancel(false);
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
void @ClassName@::setupFilterParameters()
{
  FilterParameterVector parameters;
@SetupFPContents@
  setFilterParameters(parameters);
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
void @ClassName@::dataCheck()
{
  setErrorCondition(0);
  setWarningCondition(0);
  @DataCheckContents@
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
void @ClassName@::preflight()
{
  // These are the REQUIRED lines of CODE to make sure the filter behaves correctly
  setInPreflight(true); // Set the fact that we are preflighting.
  emit preflightAboutToExecute(); // Emit this signal so that other widgets can do one file update
  emit updateFilterParameters(this); // Emit this signal to have the widgets push their values down to the filter
  dataCheck(); // Run our DataCheck to make sure everthing is setup correctly
  emit preflightExecuted(); // We are done preflighting this filter
  setInPreflight(false); // Inform the system this filter is NOT in preflight mode anymore.
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
void @ClassName@::execute()
{
  initialize();
  dataCheck();
  if(getErrorCondition() < 0) { return; }

  if (getCancel()) { return; }

  if (getWarningCondition() < 0)
  {
    QString ss = QObject::tr("Some warning message");
    setWarningCondition(-88888888);
    notifyWarningMessage(getHumanLabel(), ss, getWarningCondition());
  }

  if (getErrorCondition() < 0)
  {
    QString ss = QObject::tr("Some error message");
    setErrorCondition(-99999999);
    notifyErrorMessage(getHumanLabel(), ss, getErrorCondition());
    return;
  }

  notifyStatusMessage(getHumanLabel(), "Complete");
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
AbstractFilter::Pointer @ClassName@::newFilterInstance(bool copyFilterParameters) const
{
  @ClassName@::Pointer filter = @ClassName@::New();
  if(copyFilterParameters)
  {
    copyFilterParameterInstanceVariables(filter.get());
  }
  return filter;
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
const QString @ClassName@::getCompiledLibraryName() const
{ 
  return @PluginName@Constants::@PluginName@BaseName;
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
const QString @ClassName@::getBrandingString() const
{
  return "@PluginName@";
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
const QString @ClassName@::getFilterVersion() const
{
  QString version;
  QTextStream vStream(&version);
  vStream <<  @PluginName@::Version::Major() << "." << @PluginName@::Version::Minor() << "." << @PluginName@::Version::Patch();
  return version;
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
const QString @ClassName@::getGroupName() const
{ 
  return SIMPL::FilterGroups::Unsupported; 
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
const QString @ClassName@::getSubGroupName() const
{ 
  return "@PluginName@"; 
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
const QString @ClassName@::getHumanLabel() const
{ 
  return "@ClassName@"; 
}


// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
const QUuid @ClassName@::getUuid()
{
  return QUuid("@Uuid@");
}

